from rest_framework import generics, permissions
from .models import Categoria, Plato
from .serializers import CategoriaSerializer, PlatoSerializer

class IsAdminUser(permissions.BasePermission):
    def has_permission(self, request, view):
        return request.user.is_authenticated and request.user.role == 'admin'

# âœ… Vista para listar y crear categorÃ­as
class CategoriaListCreateView(generics.ListCreateAPIView):
    queryset = Categoria.objects.all()
    serializer_class = CategoriaSerializer
    permission_classes = [IsAdminUser]  # Solo Admins pueden crear categorÃ­as

# âœ… Vista para editar, ver y eliminar una categorÃ­a
class CategoriaDetailView(generics.RetrieveUpdateDestroyAPIView):  # ðŸ”¹ Esta vista debe existir
    queryset = Categoria.objects.all()
    serializer_class = CategoriaSerializer
    permission_classes = [IsAdminUser]  # Solo Admins pueden modificar categorÃ­as

class PlatoListView(generics.ListAPIView):
    queryset = Plato.objects.all()
    serializer_class = PlatoSerializer
    permission_classes = [permissions.AllowAny]  # ðŸ”¹ Permitir acceso sin autenticaciÃ³n

# âœ… Vista protegida para crear platos
class PlatoListCreateView(generics.ListCreateAPIView):
    queryset = Plato.objects.all()
    serializer_class = PlatoSerializer
    permission_classes = [IsAdminUser]  # Solo Admins pueden crear

# âœ… Vista protegida para modificar platos
class PlatoDetailView(generics.RetrieveUpdateDestroyAPIView):
    queryset = Plato.objects.all()
    serializer_class = PlatoSerializer
    permission_classes = [IsAdminUser]  # Solo Admins pueden modificar
